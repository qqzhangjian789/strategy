<NAME>
多币种策略（最新更改）
</NAME>
<CODE>
import time

class mid_class():
    
    def __init__(self, this_exchaneg):
        '''
        初始化数据
        :param this_exchaneg:  FMZ的交易所结构
        '''
        self.init_time = time.time()
        self.exchange = this_exchaneg
        self.name = self.exchange.GetName()  # 返回交易所名称
        self.jyd = self.exchange.GetCurrency()  # 返回操作货币对名称 例：BTC_USD
        
    def get_account(self):
        '''
        账户信息
        :return: 获取信息成功返回True 错误返回False
        '''
        try:
            self.account = self.exchange.GetAccount()  # 返回交易所信息
            self.Balance = self.account['Balance']  # 余额
            self.amount = self.account['Stocks']  # 币种
            self.FrozenBalance = self.account['FrozenBalance']  # 冻结钱
            self.ForzenStocks = self.account['FrozenStocks']  # 冻结币
            return self.account
        except:
            return False

    def get_ticker(self):
        '''
        获取市场信息
        :return:
        '''
        try:
            self.ticker = self.exchange.GetTicker()  # 获取市场信息
            return self.ticker
        except:
            return False

    def get_depth(self):
        '''
        获取深度
        :return:
        '''
        try:
            self.depth = self.exchange.GetDepth()  # 获取交易所订单薄
            self.ask = self.depth['Asks']  # 价格
            self.bid = self.depth['Bids']  # 数量
            return True
        except:
            return False

    def create_order(self, order_tpye, price, account):
        '''
        创建订单
        :param order_tpye: 挂单类型 buy买，sell 卖单
        :param price:  价格
        :param account: 数量
        :return: 挂单id
        '''
        if order_tpye == 'buy':
            try:
                order_id = self.exchange.Buy(price, account)
            except:
                return False
        elif order_tpye == 'sell':
            try:
                order_id = self.exchange.Sell(price, account)
            except:
                return False

        return order_id

    def cancel_order(self, order_id):
        '''
        取消挂单
        order_id： 挂单id号
        :return:
        '''
        return self.exchange.CancelOrder(order_id)

    def refreash_data(self):
        '''
        刷新信息
        :return: 刷新信息: 成功refreash_data_finish
        '''

        if not self.get_account():
            return 'false_get_account'

        if not self.get_ticker():
            return 'false_get_ticker'

        if not self.get_depth():
            return 'false_get_depth'
        try:
            self.get_oglc_data()
        except:
            return 'false_get_K_line_info'

        return 'refreash_data_finish!'

def main():
    test_mid = mid_class(exchange)

    #  jyd:交易对，price:基价，buy_wave:买波动   sell_wave：卖波动  stock：现货数量  a：是否已经在挂单('勿动，程序自动检测处理') list_id：挂单id存放处（'勿动，程序自动检测处理'）
    data = [
        {'jyd': 'ONT_USDT', 'price':0.8280, 'buy_wave': 0.003, 'sell_wave': 0.003, 'stock': 100,'a':0,'list_id':[]},
        {'jyd': 'TRX_USDT', 'price':0.02937, 'buy_wave': 0.003, 'sell_wave': 0.003, 'stock': 100,'a':0,'list_id':[]}
    ]
    

    while True:
        Sleep(1000)
        Log(test_mid.get_depth())
        Log('账户信息', test_mid.get_account())
        Log('持仓信息', exchange.GetPosition())
        for i in data:
            exchange.IO('currency',i['jyd'])
            records = exchange.GetRecords(PERIOD_M5)  #  K线周期 PERIOD_M1指1分钟,PERIOD_M5指5分钟,PERIOD_M15指15分钟,PERIOD_M30指30分钟,PERIOD_H1指1小时,PERIOD_D1指一天
            new_K = records[-2]
            bi = (new_K['High'] - new_K['Low']) / new_K['Close']
            Log('K线信息',new_K)
            Log('当前交易对',i['jyd'])
  
            price = i['price']
            buy_wave = i['buy_wave'] * bi
            if buy_wave > 0.1:
                buy_wave == 0.1
            elif buy_wave < 0.003:
                buy_wave == 0.003
                
            
            sell_wave = i['sell_wave'] * bi
            if sell_wave > 0.1:
                sell_wave == 0.1
            elif sell_wave < 0.003:
                sell_wave == 0.003
            
            stock = i['stock']
            a = i['a']
            list_id = i['list_id']
            
            # 查询当前仓位，有仓位正常返回，无仓位返回0
            try:
                position = exchange.GetPosition()
                amount = position[0].Amount
                amount = round(amount,0)
                Log('持仓数量amount',amount)
            except:
                amount = 0
    
            # 创建买单
            if a == 0:
                exchange.SetDirection("buy")
                robot_buy = test_mid.create_order('buy', price - price * buy_wave, round((stock + amount) * (price *buy_wave) / 2 / (price - price * buy_wave),0))
                robot_buy_id = exchange.GetOrder(robot_buy)


                # 创建卖单
                exchange.SetDirection("sell")
                robot_sell = test_mid.create_order('sell', price + price * sell_wave, round((stock + amount) * (price * sell_wave) / 2 / (price + price * sell_wave),0))
                robot_sell_id = exchange.GetOrder(robot_sell)

                list_id = []
                list_id.append(robot_buy_id['Id'])
                list_id.append(robot_sell_id['Id'])
                i['list_id'] = list_id
                i['a'] = 1
                Log('data',data)
                
            elif a == 1:
                while True:
                    Sleep(1000)
                    buy_cj = exchange.GetOrder(list_id[0])
                    sell_cj = exchange.GetOrder(list_id[1])
                # 如果都未成交， 等待 跳出这次循环
                    if buy_cj['Status'] == 0 and sell_cj['Status'] == 0:
                        break

                # 买单成交，取消卖单，重制price  下单
                    if buy_cj['Status'] == 1:
                    # 全部成交
                        if buy_cj['Amount'] == buy_cj["DealAmount"]:
                            Log('买单全部成交成交',i['jyd'],price)
                            test_mid.cancel_order(sell_cj['Id'])
                            i['price'] = buy_cj['Price']
                            i['a'] = 0
                            break
                    # 部分成交
                        elif buy_cj["Amount"] == buy_cj["DealAmount"] and sell_cj["Status"] == 1:
                            Log('部分成交')
                            i['price'] = buy_cj['Price']
                            i['a'] = 0
                            break
                # 卖单成交 取消买单，重制price  下单
                    elif sell_cj['Status'] == 1:
                    # 全部成交
                        if sell_cj['Amount'] == sell_cj['DealAmount']:
                            Log('卖单全部成交',i['jyd'],price)
                            test_mid.cancel_order(buy_cj['Id'])
                            i['price'] = sell_cj['Price']
                            i['a'] = 0
                            break
                    # 部分成交
                        elif sell_cj['Amount'] == sell_cj['DealAmount'] and buy_cj['Status'] == 1:
                            log('部分成交')
                            i['price'] = sell_cj['Price']
                            i['a'] = 0
                            break
                     # 买单卖单同时全部成交
                    elif buy_wcj['Amount'] == buy_wcj['DealAmount'] and sell_wcj['Amount'] == sell_wcj['DealAmount']:
                            break
       
            
            
       
</CODE>
<LANG>
1
</LANG>
<TYPE>
0
</TYPE>
<TIME>
2020-09-15 18:03:14
</TIME>
